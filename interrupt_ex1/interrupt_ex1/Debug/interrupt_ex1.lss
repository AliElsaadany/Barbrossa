
interrupt_ex1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000156  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000920  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004b9  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014d  00000000  00000000  00000e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000372  00000000  00000000  00000fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001318  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000128  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e4  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define LEDS PORTC


int main(void)
{
	DDRC = 0XFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
	DDRD&=1<<2;
  96:	81 b3       	in	r24, 0x11	; 17
  98:	84 70       	andi	r24, 0x04	; 4
  9a:	81 bb       	out	0x11, r24	; 17
	LEDS=0X01;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	85 bb       	out	0x15, r24	; 21
	GICR=1<<INT0;
  a0:	80 e4       	ldi	r24, 0x40	; 64
  a2:	8b bf       	out	0x3b, r24	; 59
	MCUCR=0X00;
  a4:	15 be       	out	0x35, r1	; 53
	sei();
  a6:	78 94       	sei
    while(1)
    {
        if (LEDS == 0X80)
		LEDS =0X01;
  a8:	91 e0       	ldi	r25, 0x01	; 1
	GICR=1<<INT0;
	MCUCR=0X00;
	sei();
    while(1)
    {
        if (LEDS == 0X80)
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	80 38       	cpi	r24, 0x80	; 128
  ae:	11 f4       	brne	.+4      	; 0xb4 <main+0x22>
		LEDS =0X01;
  b0:	95 bb       	out	0x15, r25	; 21
  b2:	03 c0       	rjmp	.+6      	; 0xba <main+0x28>
		else
		LEDS=LEDS<<1;
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	88 0f       	add	r24, r24
  b8:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	33 ed       	ldi	r19, 0xD3	; 211
  be:	40 e3       	ldi	r20, 0x30	; 48
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	40 40       	sbci	r20, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x2e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x38>
  ca:	00 00       	nop
  cc:	ee cf       	rjmp	.-36     	; 0xaa <main+0x18>

000000ce <__vector_1>:
		_delay_ms(1000);
    }
}

ISR(INT0_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	4f 93       	push	r20
  de:	5f 93       	push	r21
  e0:	6f 93       	push	r22
  e2:	7f 93       	push	r23
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
  ec:	4f ef       	ldi	r20, 0xFF	; 255
  ee:	59 e6       	ldi	r21, 0x69	; 105
  f0:	68 e1       	ldi	r22, 0x18	; 24
  f2:	41 50       	subi	r20, 0x01	; 1
  f4:	50 40       	sbci	r21, 0x00	; 0
  f6:	60 40       	sbci	r22, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <__vector_1+0x24>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <__vector_1+0x2e>
  fc:	00 00       	nop
	unsigned char TEMP;
	_delay_ms(500);
	TEMP=LEDS;
  fe:	35 b3       	in	r19, 0x15	; 21
 100:	85 e0       	ldi	r24, 0x05	; 5
 102:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0 ; i<5 ; i++ )
	{
		LEDS=0XFF;
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	25 bb       	out	0x15, r18	; 21
 108:	4f ef       	ldi	r20, 0xFF	; 255
 10a:	59 e6       	ldi	r21, 0x69	; 105
 10c:	68 e1       	ldi	r22, 0x18	; 24
 10e:	41 50       	subi	r20, 0x01	; 1
 110:	50 40       	sbci	r21, 0x00	; 0
 112:	60 40       	sbci	r22, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <__vector_1+0x40>
 116:	00 c0       	rjmp	.+0      	; 0x118 <__vector_1+0x4a>
 118:	00 00       	nop
		_delay_ms(500);
		LEDS=0X00;
 11a:	15 ba       	out	0x15, r1	; 21
 11c:	4f ef       	ldi	r20, 0xFF	; 255
 11e:	59 e6       	ldi	r21, 0x69	; 105
 120:	68 e1       	ldi	r22, 0x18	; 24
 122:	41 50       	subi	r20, 0x01	; 1
 124:	50 40       	sbci	r21, 0x00	; 0
 126:	60 40       	sbci	r22, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <__vector_1+0x54>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <__vector_1+0x5e>
 12c:	00 00       	nop
 12e:	01 97       	sbiw	r24, 0x01	; 1
ISR(INT0_vect)
{
	unsigned char TEMP;
	_delay_ms(500);
	TEMP=LEDS;
	for(int i=0 ; i<5 ; i++ )
 130:	51 f7       	brne	.-44     	; 0x106 <__vector_1+0x38>
		LEDS=0XFF;
		_delay_ms(500);
		LEDS=0X00;
		_delay_ms(500);
	}
	LEDS=TEMP ;
 132:	35 bb       	out	0x15, r19	; 21
}
 134:	bf 91       	pop	r27
 136:	af 91       	pop	r26
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	7f 91       	pop	r23
 13e:	6f 91       	pop	r22
 140:	5f 91       	pop	r21
 142:	4f 91       	pop	r20
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
