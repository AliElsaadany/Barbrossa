
LCD_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000003a6  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000b78  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e6  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000023b  00000000  00000000  000014fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042e  00000000  00000000  00001739  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00001b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c3  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000038a  00000000  00000000  00001e73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  8a:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Port_Direction>:
 */ 
#include "GPIO_AVR.h"

void Port_Direction ( char base , char state )
{
	if (state==output)
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <Port_Direction+0xe>
	(*(volatile unsigned char*)(base+1))=0xff; // DDRA = 0XFF
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
	else
	(*(volatile unsigned char*)(base+1))=0x00;
  a0:	e8 2f       	mov	r30, r24
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	11 82       	std	Z+1, r1	; 0x01
  a6:	08 95       	ret

000000a8 <Pin_Direction>:
}

void Pin_Direction(char base , char pin , char state)
{
	if (state==output)
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	79 f4       	brne	.+30     	; 0xca <Pin_Direction+0x22>
	(*(volatile unsigned char*)(base+1))|=(1<<pin);
  ac:	e8 2f       	mov	r30, r24
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	21 81       	ldd	r18, Z+1	; 0x01
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	ac 01       	movw	r20, r24
  b8:	02 c0       	rjmp	.+4      	; 0xbe <Pin_Direction+0x16>
  ba:	44 0f       	add	r20, r20
  bc:	55 1f       	adc	r21, r21
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <Pin_Direction+0x12>
  c2:	ba 01       	movw	r22, r20
  c4:	62 2b       	or	r22, r18
  c6:	61 83       	std	Z+1, r22	; 0x01
  c8:	08 95       	ret
	else
	(*(volatile unsigned char*)(base+1))&=~(1<<pin);
  ca:	e8 2f       	mov	r30, r24
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	21 81       	ldd	r18, Z+1	; 0x01
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	ac 01       	movw	r20, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <Pin_Direction+0x34>
  d8:	44 0f       	add	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <Pin_Direction+0x30>
  e0:	ba 01       	movw	r22, r20
  e2:	60 95       	com	r22
  e4:	62 23       	and	r22, r18
  e6:	61 83       	std	Z+1, r22	; 0x01
  e8:	08 95       	ret

000000ea <Pin_Reset>:
}

void Pin_Reset (char base , char pin )
{
	(*(volatile unsigned char*)(base+2))&=~(1<<pin);
  ea:	e8 2f       	mov	r30, r24
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	22 81       	ldd	r18, Z+2	; 0x02
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	ac 01       	movw	r20, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <Pin_Reset+0x12>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <Pin_Reset+0xe>
 100:	ba 01       	movw	r22, r20
 102:	60 95       	com	r22
 104:	62 23       	and	r22, r18
 106:	62 83       	std	Z+2, r22	; 0x02
}
 108:	08 95       	ret

0000010a <Pin_Set>:

void Pin_Set (char base , char pin )
{
	(*(volatile unsigned char*)(base+2))|=(1<<pin);
 10a:	e8 2f       	mov	r30, r24
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	22 81       	ldd	r18, Z+2	; 0x02
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	ac 01       	movw	r20, r24
 116:	02 c0       	rjmp	.+4      	; 0x11c <Pin_Set+0x12>
 118:	44 0f       	add	r20, r20
 11a:	55 1f       	adc	r21, r21
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <Pin_Set+0xe>
 120:	ba 01       	movw	r22, r20
 122:	62 2b       	or	r22, r18
 124:	62 83       	std	Z+2, r22	; 0x02
}
 126:	08 95       	ret

00000128 <Pin_Toggle>:

void Pin_Toggle (char base , char pin )
{
	(*(volatile unsigned char*)(base+2))^=(1<<pin);
 128:	e8 2f       	mov	r30, r24
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	22 81       	ldd	r18, Z+2	; 0x02
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ac 01       	movw	r20, r24
 134:	02 c0       	rjmp	.+4      	; 0x13a <Pin_Toggle+0x12>
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <Pin_Toggle+0xe>
 13e:	ba 01       	movw	r22, r20
 140:	62 27       	eor	r22, r18
 142:	62 83       	std	Z+2, r22	; 0x02
}
 144:	08 95       	ret

00000146 <Port_Write>:

void Port_Write (char base, char value )
{
	(*(volatile unsigned char*)(base+2))=value;
 146:	e8 2f       	mov	r30, r24
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	62 83       	std	Z+2, r22	; 0x02
}
 14c:	08 95       	ret

0000014e <Port_Read>:

char Port_Read (char base )
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	0f 92       	push	r0
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char result;
	result= (*(volatile unsigned char*)(base));
 158:	e8 2f       	mov	r30, r24
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	89 83       	std	Y+1, r24	; 0x01
	return result;
 160:	89 81       	ldd	r24, Y+1	; 0x01
}
 162:	0f 90       	pop	r0
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <Pin_Write>:


void Pin_Write(char base, char pin, char value)
{
	if (value==0)
 16a:	44 23       	and	r20, r20
 16c:	79 f4       	brne	.+30     	; 0x18c <Pin_Write+0x22>
	(*(volatile unsigned char*)(base+2))|=1<<pin ;
 16e:	e8 2f       	mov	r30, r24
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	22 81       	ldd	r18, Z+2	; 0x02
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	ac 01       	movw	r20, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <Pin_Write+0x16>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <Pin_Write+0x12>
 184:	ba 01       	movw	r22, r20
 186:	62 2b       	or	r22, r18
 188:	62 83       	std	Z+2, r22	; 0x02
 18a:	08 95       	ret
	else
	(*(volatile unsigned char*)(base+2)) &=~(1<<pin);
 18c:	e8 2f       	mov	r30, r24
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	22 81       	ldd	r18, Z+2	; 0x02
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	ac 01       	movw	r20, r24
 198:	02 c0       	rjmp	.+4      	; 0x19e <Pin_Write+0x34>
 19a:	44 0f       	add	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <Pin_Write+0x30>
 1a2:	ba 01       	movw	r22, r20
 1a4:	60 95       	com	r22
 1a6:	62 23       	and	r22, r18
 1a8:	62 83       	std	Z+2, r22	; 0x02
 1aa:	08 95       	ret

000001ac <Pin_Read>:
}

char Pin_Read (char base, char pin)
{
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	0f 92       	push	r0
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char result ;
	result= (*(volatile unsigned char*)(base)&&(1<<pin));
 1b6:	e8 2f       	mov	r30, r24
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	88 23       	and	r24, r24
 1be:	71 f0       	breq	.+28     	; 0x1dc <Pin_Read+0x30>
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	9c 01       	movw	r18, r24
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <Pin_Read+0x20>
 1c8:	22 0f       	add	r18, r18
 1ca:	33 1f       	adc	r19, r19
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <Pin_Read+0x1c>
	(*(volatile unsigned char*)(base+2))|=1<<pin ;
	else
	(*(volatile unsigned char*)(base+2)) &=~(1<<pin);
}

char Pin_Read (char base, char pin)
 1d0:	21 15       	cp	r18, r1
 1d2:	31 05       	cpc	r19, r1
 1d4:	29 f4       	brne	.+10     	; 0x1e0 <Pin_Read+0x34>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <Pin_Read+0x34>
{
	volatile unsigned char result ;
	result= (*(volatile unsigned char*)(base)&&(1<<pin));
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	89 83       	std	Y+1, r24	; 0x01
	return result;
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
}
 1e4:	0f 90       	pop	r0
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <LCD_Data>:
	
	
}	

void LCD_Data(unsigned char out)
{
 1ec:	cf 93       	push	r28
 1ee:	c8 2f       	mov	r28, r24
	Pin_Set(command,RS);
 1f0:	86 e3       	ldi	r24, 0x36	; 54
 1f2:	62 e0       	ldi	r22, 0x02	; 2
 1f4:	0e 94 85 00 	call	0x10a	; 0x10a <Pin_Set>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	8f ec       	ldi	r24, 0xCF	; 207
 1fa:	97 e0       	ldi	r25, 0x07	; 7
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_Data+0x10>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_Data+0x16>
 202:	00 00       	nop
		_delay_ms(1);

	}
	else if (mode==4)
	{
		Port_Write(data,(out&0XF0));
 204:	6c 2f       	mov	r22, r28
 206:	60 7f       	andi	r22, 0xF0	; 240
 208:	83 e3       	ldi	r24, 0x33	; 51
 20a:	0e 94 a3 00 	call	0x146	; 0x146 <Port_Write>
		Pin_Set(command,RS);
 20e:	86 e3       	ldi	r24, 0x36	; 54
 210:	62 e0       	ldi	r22, 0x02	; 2
 212:	0e 94 85 00 	call	0x10a	; 0x10a <Pin_Set>
		Pin_Set(command,EN);
 216:	86 e3       	ldi	r24, 0x36	; 54
 218:	63 e0       	ldi	r22, 0x03	; 3
 21a:	0e 94 85 00 	call	0x10a	; 0x10a <Pin_Set>
 21e:	af ec       	ldi	r26, 0xCF	; 207
 220:	b7 e0       	ldi	r27, 0x07	; 7
 222:	11 97       	sbiw	r26, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <LCD_Data+0x36>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_Data+0x3c>
 228:	00 00       	nop
		_delay_ms(1);
		Pin_Reset(command,EN);
 22a:	86 e3       	ldi	r24, 0x36	; 54
 22c:	63 e0       	ldi	r22, 0x03	; 3
 22e:	0e 94 75 00 	call	0xea	; 0xea <Pin_Reset>
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	90 e7       	ldi	r25, 0x70	; 112
 236:	a2 e0       	ldi	r26, 0x02	; 2
 238:	81 50       	subi	r24, 0x01	; 1
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	a0 40       	sbci	r26, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <LCD_Data+0x4c>
 240:	00 c0       	rjmp	.+0      	; 0x242 <LCD_Data+0x56>
 242:	00 00       	nop
		_delay_ms(100);
		Port_Write(data,(out<<4));
 244:	6c 2f       	mov	r22, r28
 246:	62 95       	swap	r22
 248:	60 7f       	andi	r22, 0xF0	; 240
 24a:	83 e3       	ldi	r24, 0x33	; 51
 24c:	0e 94 a3 00 	call	0x146	; 0x146 <Port_Write>
	}
	
	Pin_Set(command,EN);
 250:	86 e3       	ldi	r24, 0x36	; 54
 252:	63 e0       	ldi	r22, 0x03	; 3
 254:	0e 94 85 00 	call	0x10a	; 0x10a <Pin_Set>
 258:	af ec       	ldi	r26, 0xCF	; 207
 25a:	b7 e0       	ldi	r27, 0x07	; 7
 25c:	11 97       	sbiw	r26, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <LCD_Data+0x70>
 260:	00 c0       	rjmp	.+0      	; 0x262 <LCD_Data+0x76>
 262:	00 00       	nop
	_delay_ms(1);
	Pin_Reset(command,EN);
 264:	86 e3       	ldi	r24, 0x36	; 54
 266:	63 e0       	ldi	r22, 0x03	; 3
 268:	0e 94 75 00 	call	0xea	; 0xea <Pin_Reset>
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	90 e7       	ldi	r25, 0x70	; 112
 270:	a2 e0       	ldi	r26, 0x02	; 2
 272:	81 50       	subi	r24, 0x01	; 1
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	a0 40       	sbci	r26, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <LCD_Data+0x86>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_Data+0x90>
 27c:	00 00       	nop
	_delay_ms(100);
	
	
}
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <LCD_Command>:

void LCD_Command (unsigned char cmd)
{
 282:	cf 93       	push	r28
 284:	c8 2f       	mov	r28, r24
		

	}
	else if (mode==4)
	{
		Port_Write(data,(cmd&0XF0));
 286:	68 2f       	mov	r22, r24
 288:	60 7f       	andi	r22, 0xF0	; 240
 28a:	83 e3       	ldi	r24, 0x33	; 51
 28c:	0e 94 a3 00 	call	0x146	; 0x146 <Port_Write>
		Pin_Reset(command,RS);
 290:	86 e3       	ldi	r24, 0x36	; 54
 292:	62 e0       	ldi	r22, 0x02	; 2
 294:	0e 94 75 00 	call	0xea	; 0xea <Pin_Reset>
		Pin_Reset(command,EN);
 298:	86 e3       	ldi	r24, 0x36	; 54
 29a:	63 e0       	ldi	r22, 0x03	; 3
 29c:	0e 94 75 00 	call	0xea	; 0xea <Pin_Reset>
 2a0:	8f ec       	ldi	r24, 0xCF	; 207
 2a2:	97 e0       	ldi	r25, 0x07	; 7
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_Command+0x22>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_Command+0x28>
 2aa:	00 00       	nop
		_delay_ms(1);
		Pin_Set(command,EN);
 2ac:	86 e3       	ldi	r24, 0x36	; 54
 2ae:	63 e0       	ldi	r22, 0x03	; 3
 2b0:	0e 94 85 00 	call	0x10a	; 0x10a <Pin_Set>
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	90 e7       	ldi	r25, 0x70	; 112
 2b8:	a2 e0       	ldi	r26, 0x02	; 2
 2ba:	81 50       	subi	r24, 0x01	; 1
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	a0 40       	sbci	r26, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <LCD_Command+0x38>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_Command+0x42>
 2c4:	00 00       	nop
		_delay_ms(100);
		Port_Write(data,(cmd<<4));
 2c6:	6c 2f       	mov	r22, r28
 2c8:	62 95       	swap	r22
 2ca:	60 7f       	andi	r22, 0xF0	; 240
 2cc:	83 e3       	ldi	r24, 0x33	; 51
 2ce:	0e 94 a3 00 	call	0x146	; 0x146 <Port_Write>

	}
	Pin_Reset(command,RS);
 2d2:	86 e3       	ldi	r24, 0x36	; 54
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	0e 94 75 00 	call	0xea	; 0xea <Pin_Reset>
	Pin_Set(command,EN);
 2da:	86 e3       	ldi	r24, 0x36	; 54
 2dc:	63 e0       	ldi	r22, 0x03	; 3
 2de:	0e 94 85 00 	call	0x10a	; 0x10a <Pin_Set>
 2e2:	af ec       	ldi	r26, 0xCF	; 207
 2e4:	b7 e0       	ldi	r27, 0x07	; 7
 2e6:	11 97       	sbiw	r26, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCD_Command+0x64>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LCD_Command+0x6a>
 2ec:	00 00       	nop
	_delay_ms(1);
	Pin_Reset(command,EN);
 2ee:	86 e3       	ldi	r24, 0x36	; 54
 2f0:	63 e0       	ldi	r22, 0x03	; 3
 2f2:	0e 94 75 00 	call	0xea	; 0xea <Pin_Reset>
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	90 e7       	ldi	r25, 0x70	; 112
 2fa:	a2 e0       	ldi	r26, 0x02	; 2
 2fc:	81 50       	subi	r24, 0x01	; 1
 2fe:	90 40       	sbci	r25, 0x00	; 0
 300:	a0 40       	sbci	r26, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <LCD_Command+0x7a>
 304:	00 c0       	rjmp	.+0      	; 0x306 <LCD_Command+0x84>
 306:	00 00       	nop
	_delay_ms(100); 
}
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <LCD_Init>:
    
}

void LCD_Init()
{
	Port_Direction(data,output);
 30c:	83 e3       	ldi	r24, 0x33	; 51
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	0e 94 49 00 	call	0x92	; 0x92 <Port_Direction>
	Port_Direction(command,output);
 314:	86 e3       	ldi	r24, 0x36	; 54
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	0e 94 49 00 	call	0x92	; 0x92 <Port_Direction>
	Port_Write(data,0x00);
 31c:	83 e3       	ldi	r24, 0x33	; 51
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	0e 94 a3 00 	call	0x146	; 0x146 <Port_Write>
	Pin_Reset(command,EN);
 324:	86 e3       	ldi	r24, 0x36	; 54
 326:	63 e0       	ldi	r22, 0x03	; 3
 328:	0e 94 75 00 	call	0xea	; 0xea <Pin_Reset>
		
		
	}		
	else if (mode==4)
	{
		LCD_Command(0X33);
 32c:	83 e3       	ldi	r24, 0x33	; 51
 32e:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Command>
		LCD_Command(0X32);
 332:	82 e3       	ldi	r24, 0x32	; 50
 334:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Command>
		LCD_Command(0X28);
 338:	88 e2       	ldi	r24, 0x28	; 40
 33a:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Command>

	}
	
	LCD_Command(0X0E);
 33e:	8e e0       	ldi	r24, 0x0E	; 14
 340:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Command>
	LCD_Command(0X01);
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Command>
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	93 ed       	ldi	r25, 0xD3	; 211
 34e:	a0 e3       	ldi	r26, 0x30	; 48
 350:	81 50       	subi	r24, 0x01	; 1
 352:	90 40       	sbci	r25, 0x00	; 0
 354:	a0 40       	sbci	r26, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <LCD_Init+0x44>
 358:	00 c0       	rjmp	.+0      	; 0x35a <LCD_Init+0x4e>
 35a:	00 00       	nop
	_delay_ms(2000);
	LCD_Command(0X06);
 35c:	86 e0       	ldi	r24, 0x06	; 6
 35e:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Command>
	
	
}	
 362:	08 95       	ret

00000364 <LCD_String>:
	Pin_Reset(command,EN);
	_delay_ms(100); 
}

void LCD_String(char* str)
{
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	8c 01       	movw	r16, r24
	unsigned char i=0;
	while(str[i]!=0)
 36c:	fc 01       	movw	r30, r24
 36e:	80 81       	ld	r24, Z
 370:	88 23       	and	r24, r24
 372:	51 f0       	breq	.+20     	; 0x388 <LCD_String+0x24>
	_delay_ms(100); 
}

void LCD_String(char* str)
{
	unsigned char i=0;
 374:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i]!=0)
	{
		LCD_Data(str[i]);
 376:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCD_Data>
		i++;
 37a:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_String(char* str)
{
	unsigned char i=0;
	while(str[i]!=0)
 37c:	f8 01       	movw	r30, r16
 37e:	ec 0f       	add	r30, r28
 380:	f1 1d       	adc	r31, r1
 382:	80 81       	ld	r24, Z
 384:	88 23       	and	r24, r24
 386:	b9 f7       	brne	.-18     	; 0x376 <LCD_String+0x12>
	{
		LCD_Data(str[i]);
		i++;
	}
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	08 95       	ret

00000390 <main>:
void LCD_Command (unsigned char cmd);
void LCD_String(char* str);

int main(void)
{
	LCD_Init();
 390:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_Init>
	LCD_String("jana");
 394:	80 e6       	ldi	r24, 0x60	; 96
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 b2 01 	call	0x364	; 0x364 <LCD_String>
    
}
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	08 95       	ret

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
